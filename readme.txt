Введение.
Целями практикума являются:
1.	Использование ООП при проектировании архитектуры программы.
2.	Анализ существующих алгоритмов.
3.	Разработка своего алгоритма.
4.	Оптимизация алгоритма.
5.	Анализ сложности алгоритма.
6.	Эксперимент и тестирование.
7.	Общее представление о графических библиотеках (на примере MFC).
8.	Архитектура программ с графическим интерфейсом.

Указания по планированию архитектуры системы:
Результатом работы должны быть 4 главных класса:
1.	Класс, хранящий данные и решающий задачу ПО ШАГАМ.
2.	Класс консольного интерфейса пользователя, позволяющий решать задачу целиком или по шагам.
3.	Тестирующий класс.
4.	Класс графического интерфейса пользователя, позволяющий решать задачу целиком или по шагам.

Консольное приложение должно использовать классы 1,2,3, MFC-приложение – 1,3,4. Таким образом, классы 1 и 3 должны быть написаны таким образом, чтобы уметь взаимодействовать как с консольным, так и с графическим интерфейсом пользователя. Взаимодействие между классами осуществляется с помощью public-методов.

Работа делится на этапы, каждый из которых заканчивается сдачей работающей программы:
1.	План архитектуры системы: определения 2-х основных классов (алгоритм решения задачи по шагам и интерфейс пользователя), большинство методов пока без реализации.
2.	Консольное приложение без оптимизации: реализована 1-я версия решения задачи по шагам и консольный интерфейс пользователя, файловый ввод-вывод.
3.	Тестирование: проверка корректности работы алгоритма на различных входных данных.
4.	Оптимизация: оптимизированная версия решения задачи, измерение сложности каждого шага и подсчет общей сложности решения задачи.
5.	Анализ сложности и эксперимент: набор тестов, позволяющих обнаружить зависимость общей сложности решения от параметров задачи. Результатом этого этапа являются 2 главы в документации: теоретические оценки сложности неоптимизированного и оптимизированного решения (формулы зависимости суммарной сложности решения от параметров задачи); таблица результатов – параметры задачи, физическое время оптимизированного и неоптимизированного решения, отношения физического времени к теоретическим оценкам (должна получиться примерно константа). Дополнительно нужна проверка совпадения неоптимизированного и оптимизированного решений – количество экспериментов, когда их ответы совпали (возможно, с некоторой точностью).
6.	Графический интерфейс: MFC-приложение для визуализации хода решения по шагам.


Условие задачи.

	Пары чисел.
Пусть нам дана пара чисел (a, b). Мы можем получить из нее новую пару прибавив одно из этих чисел к другому. В результате у наc будет либо пара (a+b, b), либо (a, a+b). Эта операция занимает одну секунду.
Пусть изначально у нас имеется пара (1, 1). Требуется реализовать алгоритм, позволяющий за минимальное время получить в качестве хотя бы одного из элементов пары число N.

